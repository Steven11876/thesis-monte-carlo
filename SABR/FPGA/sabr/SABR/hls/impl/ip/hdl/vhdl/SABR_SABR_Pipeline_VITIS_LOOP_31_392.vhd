-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SABR_SABR_Pipeline_VITIS_LOOP_31_392 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sigma_init : IN STD_LOGIC_VECTOR (63 downto 0);
    S0 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_92_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_92_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem_92_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_92_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_92_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_92_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_92_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_92_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_92_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_92_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_92_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_92_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_92_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_92_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem_92_0_WREADY : IN STD_LOGIC;
    m_axi_gmem_92_0_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_92_0_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_92_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem_92_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_92_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_92_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_92_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem_92_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_92_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_92_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_92_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_92_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_92_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_92_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_92_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_92_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_92_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_92_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_92_0_RVALID : IN STD_LOGIC;
    m_axi_gmem_92_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem_92_0_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_92_0_RLAST : IN STD_LOGIC;
    m_axi_gmem_92_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_92_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_92_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_92_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_92_0_BVALID : IN STD_LOGIC;
    m_axi_gmem_92_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem_92_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_92_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_92_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln31_92 : IN STD_LOGIC_VECTOR (59 downto 0);
    sqrt_deltat : IN STD_LOGIC_VECTOR (63 downto 0);
    rho : IN STD_LOGIC_VECTOR (63 downto 0);
    sqrt_one_minus_rho_sq : IN STD_LOGIC_VECTOR (63 downto 0);
    beta : IN STD_LOGIC_VECTOR (63 downto 0);
    one_plus_r_deltat : IN STD_LOGIC_VECTOR (63 downto 0);
    alpha : IN STD_LOGIC_VECTOR (63 downto 0);
    neg_half_alpha_sq_dt : IN STD_LOGIC_VECTOR (63 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out_ap_vld : OUT STD_LOGIC;
    x_assign_92_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    x_assign_92_out_ap_vld : OUT STD_LOGIC;
    grp_fu_14271_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_14271_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_14271_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_14271_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_14271_p_ce : OUT STD_LOGIC;
    grp_fu_14277_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_14277_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_14277_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_14277_p_ce : OUT STD_LOGIC;
    grp_fu_28629_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_28629_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_28629_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_28629_p_ce : OUT STD_LOGIC;
    grp_pow_generic_double_s_fu_28633_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_pow_generic_double_s_fu_28633_p_din2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_pow_generic_double_s_fu_28633_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_pow_generic_double_s_fu_28633_p_ce : OUT STD_LOGIC;
    grp_pow_generic_double_s_fu_28633_p_start : OUT STD_LOGIC;
    grp_pow_generic_double_s_fu_28633_p_ready : IN STD_LOGIC;
    grp_pow_generic_double_s_fu_28633_p_done : IN STD_LOGIC;
    grp_pow_generic_double_s_fu_28633_p_idle : IN STD_LOGIC );
end;


architecture behav of SABR_SABR_Pipeline_VITIS_LOOP_31_392 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage25 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage26 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage27 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage28 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage29 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage30 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage31 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage32 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage33 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln31_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage10 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage33 : signal is "none";
    signal ap_block_pp0_stage33_subdone : BOOLEAN;
    signal gmem_92_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_grp1 : BOOLEAN;
    signal reg_238 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage30 : signal is "none";
    signal ap_block_pp0_stage30_11001 : BOOLEAN;
    signal reg_245 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage22 : signal is "none";
    signal ap_block_pp0_stage22_11001 : BOOLEAN;
    signal reg_251 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage25 : signal is "none";
    signal ap_block_pp0_stage25_11001 : BOOLEAN;
    signal reg_257 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "none";
    signal ap_block_pp0_stage17_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage27 : signal is "none";
    signal ap_block_pp0_stage27_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln31_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_92_load_reg_423 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage1_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal trunc_ln40_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln40_reg_429 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_pp0_stage1_iter0_grp1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_grp1 : BOOLEAN;
    signal trunc_ln40_s_reg_434 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln40_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal bitcast_ln40_8_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal mul39_s_reg_449 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal stock_beta_reg_454 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage20 : signal is "none";
    signal ap_block_pp0_stage20_11001_ignoreCallOp131 : BOOLEAN;
    signal p_load_reg_459 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage21 : signal is "none";
    signal ap_block_pp0_stage21_11001 : BOOLEAN;
    signal tmp_s_reg_464 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal grp_pow_generic_double_s_fu_195_ap_ready : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_195_ap_ce : STD_LOGIC;
    signal ap_block_pp0_stage1_11001_ignoreCallOp78_grp0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_ignoreCallOp81 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_ignoreCallOp85 : BOOLEAN;
    signal ap_block_pp0_stage4_11001_ignoreCallOp88 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage5_11001_ignoreCallOp92 : BOOLEAN;
    signal ap_block_pp0_stage6_11001_ignoreCallOp96 : BOOLEAN;
    signal ap_block_pp0_stage7_11001_ignoreCallOp100 : BOOLEAN;
    signal ap_block_pp0_stage8_11001_ignoreCallOp104 : BOOLEAN;
    signal ap_block_pp0_stage9_11001_ignoreCallOp108 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage10_11001_ignoreCallOp111 : BOOLEAN;
    signal ap_block_pp0_stage11_11001_ignoreCallOp114 : BOOLEAN;
    signal ap_block_pp0_stage12_11001_ignoreCallOp116 : BOOLEAN;
    signal ap_block_pp0_stage13_11001_ignoreCallOp118 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage14_11001_ignoreCallOp120 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage15_11001_ignoreCallOp122 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_pp0_stage16_11001_ignoreCallOp124 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_pp0_stage17_11001_ignoreCallOp126 : BOOLEAN;
    signal ap_block_pp0_stage18_11001_ignoreCallOp127 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage18 : signal is "none";
    signal ap_block_pp0_stage19_11001_ignoreCallOp129 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage19 : signal is "none";
    signal grp_pow_generic_double_s_fu_195_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_ignoreCallOp78_grp0 : BOOLEAN;
    signal x_assign_92_fu_104 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_sig_allocacmp_x_assign_92_load : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_grp0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal empty_fu_108 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_block_pp0_stage21 : BOOLEAN;
    signal j_fu_112 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln31_fu_291_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_j_8 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage10_01001 : BOOLEAN;
    signal grp_fu_225_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage23 : signal is "none";
    signal ap_block_pp0_stage23 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage31 : signal is "none";
    signal ap_block_pp0_stage31 : BOOLEAN;
    signal grp_fu_229_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_block_pp0_stage18 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage26 : signal is "none";
    signal ap_block_pp0_stage26 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage28 : signal is "none";
    signal ap_block_pp0_stage28 : BOOLEAN;
    signal ap_block_pp0_stage13_00001 : BOOLEAN;
    signal ap_block_pp0_stage23_00001 : BOOLEAN;
    signal ap_block_pp0_stage31_00001 : BOOLEAN;
    signal grp_fu_225_ce : STD_LOGIC;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_block_pp0_stage23_11001 : BOOLEAN;
    signal ap_block_pp0_stage24_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage24 : signal is "none";
    signal ap_block_pp0_stage26_11001 : BOOLEAN;
    signal ap_block_pp0_stage31_11001 : BOOLEAN;
    signal ap_block_pp0_stage32_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage32 : signal is "none";
    signal ap_block_pp0_stage33_11001 : BOOLEAN;
    signal grp_fu_229_ce : STD_LOGIC;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_block_pp0_stage18_11001 : BOOLEAN;
    signal ap_block_pp0_stage19_11001 : BOOLEAN;
    signal ap_block_pp0_stage20_11001 : BOOLEAN;
    signal ap_block_pp0_stage28_11001 : BOOLEAN;
    signal ap_block_pp0_stage29_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage29 : signal is "none";
    signal grp_fu_233_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_block_pp0_stage25_subdone : BOOLEAN;
    signal ap_block_pp0_stage26_subdone : BOOLEAN;
    signal ap_block_pp0_stage27_subdone : BOOLEAN;
    signal ap_block_pp0_stage28_subdone : BOOLEAN;
    signal ap_block_pp0_stage29_subdone : BOOLEAN;
    signal ap_block_pp0_stage30_subdone : BOOLEAN;
    signal ap_block_pp0_stage31_subdone : BOOLEAN;
    signal ap_block_pp0_stage32_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component SABR_pow_generic_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (63 downto 0);
        exp : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component SABR_dadddsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component SABR_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component SABR_dexp_64ns_64ns_64_12_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component SABR_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component SABR_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage10,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage1_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then 
                        ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0)) then 
                        ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage10)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage33_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage33))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_195_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_double_s_fu_195_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln31_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_pow_generic_double_s_fu_195_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_195_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_195_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                empty_fu_108 <= sigma_init;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                empty_fu_108 <= grp_fu_14277_p_dout0;
            end if; 
        end if;
    end process;

    j_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln31_fu_285_p2 = ap_const_lv1_0))) then 
                    j_fu_112 <= add_ln31_fu_291_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_112 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    x_assign_92_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                x_assign_92_fu_104 <= S0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                x_assign_92_fu_104 <= grp_fu_14271_p_dout0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln31_reg_419 <= icmp_ln31_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                mul39_s_reg_449 <= grp_fu_14277_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then
                p_load_reg_459 <= empty_fu_108;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage30_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage30)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then
                reg_238 <= grp_fu_14277_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then
                reg_245 <= grp_fu_14277_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)))) then
                reg_251 <= grp_fu_14277_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage27_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage27)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17)))) then
                reg_257 <= grp_fu_14271_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage20_11001_ignoreCallOp131) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20))) then
                stock_beta_reg_454 <= grp_pow_generic_double_s_fu_28633_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                tmp_s_reg_464 <= grp_fu_28629_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                trunc_ln40_reg_429 <= trunc_ln40_fu_312_p1;
                trunc_ln40_s_reg_434 <= m_axi_gmem_92_0_RDATA(127 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                x_assign_92_load_reg_423 <= ap_sig_allocacmp_x_assign_92_load;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage10_subdone, ap_condition_exit_pp0_iter0_stage10, ap_block_pp0_stage33_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone, ap_block_pp0_stage24_subdone, ap_block_pp0_stage25_subdone, ap_block_pp0_stage26_subdone, ap_block_pp0_stage27_subdone, ap_block_pp0_stage28_subdone, ap_block_pp0_stage29_subdone, ap_block_pp0_stage30_subdone, ap_block_pp0_stage31_subdone, ap_block_pp0_stage32_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_idle_pp0_1to1 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage10)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_pp0_stage25 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage25_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                end if;
            when ap_ST_fsm_pp0_stage26 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage26_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                end if;
            when ap_ST_fsm_pp0_stage27 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage27_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                end if;
            when ap_ST_fsm_pp0_stage28 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage28_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                end if;
            when ap_ST_fsm_pp0_stage29 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage29_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                end if;
            when ap_ST_fsm_pp0_stage30 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage30_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                end if;
            when ap_ST_fsm_pp0_stage31 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage31_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                end if;
            when ap_ST_fsm_pp0_stage32 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage32_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                end if;
            when ap_ST_fsm_pp0_stage33 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage33_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln31_fu_291_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_8) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage18 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage19 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage20 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage21 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage22 <= ap_CS_fsm(22);
    ap_CS_fsm_pp0_stage23 <= ap_CS_fsm(23);
    ap_CS_fsm_pp0_stage24 <= ap_CS_fsm(24);
    ap_CS_fsm_pp0_stage25 <= ap_CS_fsm(25);
    ap_CS_fsm_pp0_stage26 <= ap_CS_fsm(26);
    ap_CS_fsm_pp0_stage27 <= ap_CS_fsm(27);
    ap_CS_fsm_pp0_stage28 <= ap_CS_fsm(28);
    ap_CS_fsm_pp0_stage29 <= ap_CS_fsm(29);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage30 <= ap_CS_fsm(30);
    ap_CS_fsm_pp0_stage31 <= ap_CS_fsm(31);
    ap_CS_fsm_pp0_stage32 <= ap_CS_fsm(32);
    ap_CS_fsm_pp0_stage33 <= ap_CS_fsm(33);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001_ignoreCallOp111 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001_ignoreCallOp114 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001_ignoreCallOp116 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001_ignoreCallOp118 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001_ignoreCallOp120 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001_ignoreCallOp122 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001_ignoreCallOp124 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_11001_ignoreCallOp126 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_11001_ignoreCallOp127 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_11001_ignoreCallOp129 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state2_pp0_stage1_iter0_grp1)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp1));
    end process;

        ap_block_pp0_stage1_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state2_pp0_stage1_iter0_grp1)
    begin
                ap_block_pp0_stage1_11001_grp1 <= ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp1));
    end process;

        ap_block_pp0_stage1_11001_ignoreCallOp78_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_ignoreCallOp78_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state2_pp0_stage1_iter0_grp1)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp1));
    end process;

        ap_block_pp0_stage1_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_11001_ignoreCallOp131 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage29_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage29_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001_ignoreCallOp81 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage33_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage33_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001_ignoreCallOp85 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001_ignoreCallOp88 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001_ignoreCallOp92 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001_ignoreCallOp96 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001_ignoreCallOp100 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001_ignoreCallOp104 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001_ignoreCallOp108 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage1_iter0_grp1_assign_proc : process(icmp_ln31_reg_419, m_axi_gmem_92_0_RVALID)
    begin
                ap_block_state2_pp0_stage1_iter0_grp1 <= ((icmp_ln31_reg_419 = ap_const_lv1_0) and (m_axi_gmem_92_0_RVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage10_assign_proc : process(ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln31_reg_419)
    begin
        if (((icmp_ln31_reg_419 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            ap_condition_exit_pp0_iter0_stage10 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage10 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage10;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage33, ap_block_pp0_stage33_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage33_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage33))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_8_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, j_fu_112, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_8 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_j_8 <= j_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_x_assign_92_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, x_assign_92_fu_104, ap_block_pp0_stage1_grp0, grp_fu_14271_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_grp0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_sig_allocacmp_x_assign_92_load <= grp_fu_14271_p_dout0;
        else 
            ap_sig_allocacmp_x_assign_92_load <= x_assign_92_fu_104;
        end if; 
    end process;

    bitcast_ln40_8_fu_330_p1 <= trunc_ln40_s_reg_434;
    bitcast_ln40_fu_326_p1 <= trunc_ln40_reg_429;

    gmem_92_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter0_reg, icmp_ln31_reg_419, m_axi_gmem_92_0_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_grp1)
    begin
        if (((icmp_ln31_reg_419 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gmem_92_blk_n_R <= m_axi_gmem_92_0_RVALID;
        else 
            gmem_92_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_14271_p_ce <= grp_fu_225_ce;
    grp_fu_14271_p_din0 <= grp_fu_225_p0;
    grp_fu_14271_p_din1 <= grp_fu_225_p1;
    grp_fu_14271_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_14277_p_ce <= grp_fu_229_ce;
    grp_fu_14277_p_din0 <= grp_fu_229_p0;
    grp_fu_14277_p_din1 <= grp_fu_229_p1;

    grp_fu_225_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage33, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage25, ap_block_pp0_stage25_11001, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17_11001, ap_CS_fsm_pp0_stage27, ap_block_pp0_stage27_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001_grp0, ap_block_pp0_stage1_subdone_grp0_done_reg, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage31, ap_CS_fsm_pp0_stage26, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage16_11001, ap_block_pp0_stage23_11001, ap_block_pp0_stage24_11001, ap_CS_fsm_pp0_stage24, ap_block_pp0_stage26_11001, ap_block_pp0_stage31_11001, ap_block_pp0_stage32_11001, ap_CS_fsm_pp0_stage32, ap_block_pp0_stage33_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage33_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage33)) or ((ap_const_boolean_0 = ap_block_pp0_stage32_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage32)) or ((ap_const_boolean_0 = ap_block_pp0_stage31_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage31)) or ((ap_const_boolean_0 = ap_block_pp0_stage26_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage26)) or ((ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24)) or ((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23)) or ((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 
    = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage27_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage27)) or ((ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17)) or ((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25)))) then 
            grp_fu_225_ce <= ap_const_logic_1;
        else 
            grp_fu_225_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_225_p0_assign_proc : process(ap_enable_reg_pp0_iter0_reg, neg_half_alpha_sq_dt, reg_251, mul39_s_reg_449, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage23, ap_CS_fsm_pp0_stage31, ap_block_pp0_stage31)
    begin
        if ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage31) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage31))) then 
                grp_fu_225_p0 <= mul39_s_reg_449;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23))) then 
                grp_fu_225_p0 <= neg_half_alpha_sq_dt;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
                grp_fu_225_p0 <= reg_251;
            else 
                grp_fu_225_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_225_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_225_p1_assign_proc : process(ap_enable_reg_pp0_iter0_reg, reg_238, reg_245, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage23, ap_CS_fsm_pp0_stage31, ap_block_pp0_stage31)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage31) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage31))) then 
            grp_fu_225_p1 <= reg_238;
        elsif ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)))) then 
            grp_fu_225_p1 <= reg_245;
        else 
            grp_fu_225_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_229_ce_assign_proc : process(ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage30, ap_block_pp0_stage30_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage22_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage25, ap_block_pp0_stage25_11001, ap_CS_fsm_pp0_stage27, ap_block_pp0_stage27_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage26, ap_CS_fsm_pp0_stage28, ap_block_pp0_stage23_11001, ap_block_pp0_stage24_11001, ap_CS_fsm_pp0_stage24, ap_block_pp0_stage26_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage18_11001, ap_block_pp0_stage19_11001, ap_block_pp0_stage20_11001, ap_block_pp0_stage28_11001, ap_block_pp0_stage29_11001, ap_CS_fsm_pp0_stage29)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage29_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage29)) or ((ap_const_boolean_0 = ap_block_pp0_stage28_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage28)) or ((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20)) or ((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19)) or ((ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage26_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage26)) or ((ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24)) or ((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23)) or ((ap_const_boolean_0 
    = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage27_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage27)) or ((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) 
    and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage30_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage30)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
            grp_fu_229_ce <= ap_const_logic_1;
        else 
            grp_fu_229_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_229_p0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0_reg, sqrt_one_minus_rho_sq, reg_238, ap_CS_fsm_pp0_stage6, reg_245, ap_CS_fsm_pp0_stage7, reg_251, reg_257, x_assign_92_load_reg_423, bitcast_ln40_fu_326_p1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage8, p_load_reg_459, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage18, empty_fu_108, ap_block_pp0_stage21, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage18, ap_CS_fsm_pp0_stage26, ap_block_pp0_stage26, ap_block_pp0_stage6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_229_p0 <= p_load_reg_459;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage26) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage26))) then 
            grp_fu_229_p0 <= reg_251;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage21) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then 
            grp_fu_229_p0 <= empty_fu_108;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage18) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18))) then 
            grp_fu_229_p0 <= reg_257;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            grp_fu_229_p0 <= reg_245;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_229_p0 <= reg_238;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_229_p0 <= x_assign_92_load_reg_423;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_229_p0 <= sqrt_one_minus_rho_sq;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_229_p0 <= bitcast_ln40_fu_326_p1;
        else 
            grp_fu_229_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_229_p1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0_reg, sqrt_deltat, rho, one_plus_r_deltat, alpha, reg_238, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage2, bitcast_ln40_8_fu_330_p1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage8, stock_beta_reg_454, ap_CS_fsm_pp0_stage21, tmp_s_reg_464, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage21, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage18, ap_CS_fsm_pp0_stage26, ap_block_pp0_stage26, ap_block_pp0_stage6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_229_p1 <= tmp_s_reg_464;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage26) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage26))) then 
            grp_fu_229_p1 <= reg_238;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage21) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then 
            grp_fu_229_p1 <= stock_beta_reg_454;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage18) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18))) then 
            grp_fu_229_p1 <= alpha;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_229_p1 <= rho;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_229_p1 <= one_plus_r_deltat;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_229_p1 <= bitcast_ln40_8_fu_330_p1;
        elsif ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_229_p1 <= sqrt_deltat;
        else 
            grp_fu_229_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_233_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage33, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage30, ap_block_pp0_stage30_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001_grp0, ap_block_pp0_stage1_subdone_grp0_done_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage31, ap_CS_fsm_pp0_stage28, ap_block_pp0_stage31_11001, ap_block_pp0_stage32_11001, ap_CS_fsm_pp0_stage32, ap_block_pp0_stage33_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage28_11001, ap_block_pp0_stage29_11001, ap_CS_fsm_pp0_stage29)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage29_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage29)) or ((ap_const_boolean_0 = ap_block_pp0_stage28_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage28)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage33_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage33)) or ((ap_const_boolean_0 = ap_block_pp0_stage32_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage32)) or ((ap_const_boolean_0 = ap_block_pp0_stage31_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage31)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0) 
    and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage30_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage30)))) then 
            grp_fu_233_ce <= ap_const_logic_1;
        else 
            grp_fu_233_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_28629_p_ce <= grp_fu_233_ce;
    grp_fu_28629_p_din0 <= ap_const_lv64_0;
    grp_fu_28629_p_din1 <= reg_257;

    grp_pow_generic_double_s_fu_195_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage1_subdone_grp0_done_reg, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20_11001_ignoreCallOp131, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1_11001_ignoreCallOp78_grp0, ap_block_pp0_stage2_11001_ignoreCallOp81, ap_block_pp0_stage3_11001_ignoreCallOp85, ap_block_pp0_stage4_11001_ignoreCallOp88, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage5_11001_ignoreCallOp92, ap_block_pp0_stage6_11001_ignoreCallOp96, ap_block_pp0_stage7_11001_ignoreCallOp100, ap_block_pp0_stage8_11001_ignoreCallOp104, ap_block_pp0_stage9_11001_ignoreCallOp108, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage10_11001_ignoreCallOp111, ap_block_pp0_stage11_11001_ignoreCallOp114, ap_block_pp0_stage12_11001_ignoreCallOp116, ap_block_pp0_stage13_11001_ignoreCallOp118, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage14_11001_ignoreCallOp120, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage15_11001_ignoreCallOp122, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage16_11001_ignoreCallOp124, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage17_11001_ignoreCallOp126, ap_block_pp0_stage18_11001_ignoreCallOp127, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage19_11001_ignoreCallOp129, ap_CS_fsm_pp0_stage19)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage19_11001_ignoreCallOp129) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19)) or ((ap_const_boolean_0 = ap_block_pp0_stage18_11001_ignoreCallOp127) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18)) or ((ap_const_boolean_0 = ap_block_pp0_stage17_11001_ignoreCallOp126) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17)) or ((ap_const_boolean_0 = ap_block_pp0_stage16_11001_ignoreCallOp124) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001_ignoreCallOp122) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001_ignoreCallOp120) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001_ignoreCallOp118) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001_ignoreCallOp116) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001_ignoreCallOp114) and (ap_const_logic_1 
    = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001_ignoreCallOp111) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001_ignoreCallOp108) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001_ignoreCallOp104) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001_ignoreCallOp100) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001_ignoreCallOp96) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001_ignoreCallOp92) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001_ignoreCallOp88) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001_ignoreCallOp85) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001_ignoreCallOp81) and (ap_const_logic_1 
    = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp78_grp0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage20_11001_ignoreCallOp131) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20)))) then 
            grp_pow_generic_double_s_fu_195_ap_ce <= ap_const_logic_1;
        else 
            grp_pow_generic_double_s_fu_195_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_pow_generic_double_s_fu_195_ap_ready <= grp_pow_generic_double_s_fu_28633_p_ready;
    grp_pow_generic_double_s_fu_28633_p_ce <= grp_pow_generic_double_s_fu_195_ap_ce;
    grp_pow_generic_double_s_fu_28633_p_din1 <= ap_sig_allocacmp_x_assign_92_load;
    grp_pow_generic_double_s_fu_28633_p_din2 <= beta;
    grp_pow_generic_double_s_fu_28633_p_start <= grp_pow_generic_double_s_fu_195_ap_start_reg;
    icmp_ln31_fu_285_p2 <= "1" when (ap_sig_allocacmp_j_8 = ap_const_lv6_31) else "0";
    m_axi_gmem_92_0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_92_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_92_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_92_0_ARID <= ap_const_lv1_0;
    m_axi_gmem_92_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_92_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_92_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_92_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_92_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_92_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_92_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_92_0_ARVALID <= ap_const_logic_0;
    m_axi_gmem_92_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_92_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_92_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_92_0_AWID <= ap_const_lv1_0;
    m_axi_gmem_92_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_92_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_92_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_92_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_92_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_92_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_92_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_92_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem_92_0_BREADY <= ap_const_logic_0;

    m_axi_gmem_92_0_RREADY_assign_proc : process(ap_enable_reg_pp0_iter0_reg, icmp_ln31_reg_419, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001_grp1)
    begin
        if (((icmp_ln31_reg_419 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_axi_gmem_92_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_92_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_92_0_WDATA <= ap_const_lv128_lc_1;
    m_axi_gmem_92_0_WID <= ap_const_lv1_0;
    m_axi_gmem_92_0_WLAST <= ap_const_logic_0;
    m_axi_gmem_92_0_WSTRB <= ap_const_lv16_0;
    m_axi_gmem_92_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem_92_0_WVALID <= ap_const_logic_0;
    p_out <= empty_fu_108;

    p_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage10, icmp_ln31_reg_419, ap_loop_exit_ready, ap_block_pp0_stage10_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln31_reg_419 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln40_fu_312_p1 <= m_axi_gmem_92_0_RDATA(64 - 1 downto 0);
    x_assign_92_out <= x_assign_92_fu_104;

    x_assign_92_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage10, icmp_ln31_reg_419, ap_loop_exit_ready, ap_block_pp0_stage10_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln31_reg_419 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            x_assign_92_out_ap_vld <= ap_const_logic_1;
        else 
            x_assign_92_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
