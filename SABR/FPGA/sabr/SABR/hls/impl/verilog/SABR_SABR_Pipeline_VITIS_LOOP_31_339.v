// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SABR_SABR_Pipeline_VITIS_LOOP_31_339 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sigma_init,
        S0,
        m_axi_gmem_39_0_AWVALID,
        m_axi_gmem_39_0_AWREADY,
        m_axi_gmem_39_0_AWADDR,
        m_axi_gmem_39_0_AWID,
        m_axi_gmem_39_0_AWLEN,
        m_axi_gmem_39_0_AWSIZE,
        m_axi_gmem_39_0_AWBURST,
        m_axi_gmem_39_0_AWLOCK,
        m_axi_gmem_39_0_AWCACHE,
        m_axi_gmem_39_0_AWPROT,
        m_axi_gmem_39_0_AWQOS,
        m_axi_gmem_39_0_AWREGION,
        m_axi_gmem_39_0_AWUSER,
        m_axi_gmem_39_0_WVALID,
        m_axi_gmem_39_0_WREADY,
        m_axi_gmem_39_0_WDATA,
        m_axi_gmem_39_0_WSTRB,
        m_axi_gmem_39_0_WLAST,
        m_axi_gmem_39_0_WID,
        m_axi_gmem_39_0_WUSER,
        m_axi_gmem_39_0_ARVALID,
        m_axi_gmem_39_0_ARREADY,
        m_axi_gmem_39_0_ARADDR,
        m_axi_gmem_39_0_ARID,
        m_axi_gmem_39_0_ARLEN,
        m_axi_gmem_39_0_ARSIZE,
        m_axi_gmem_39_0_ARBURST,
        m_axi_gmem_39_0_ARLOCK,
        m_axi_gmem_39_0_ARCACHE,
        m_axi_gmem_39_0_ARPROT,
        m_axi_gmem_39_0_ARQOS,
        m_axi_gmem_39_0_ARREGION,
        m_axi_gmem_39_0_ARUSER,
        m_axi_gmem_39_0_RVALID,
        m_axi_gmem_39_0_RREADY,
        m_axi_gmem_39_0_RDATA,
        m_axi_gmem_39_0_RLAST,
        m_axi_gmem_39_0_RID,
        m_axi_gmem_39_0_RFIFONUM,
        m_axi_gmem_39_0_RUSER,
        m_axi_gmem_39_0_RRESP,
        m_axi_gmem_39_0_BVALID,
        m_axi_gmem_39_0_BREADY,
        m_axi_gmem_39_0_BRESP,
        m_axi_gmem_39_0_BID,
        m_axi_gmem_39_0_BUSER,
        sext_ln31_39,
        sqrt_deltat,
        rho,
        sqrt_one_minus_rho_sq,
        beta,
        one_plus_r_deltat,
        alpha,
        neg_half_alpha_sq_dt,
        p_out,
        p_out_ap_vld,
        x_assign_39_out,
        x_assign_39_out_ap_vld,
        grp_fu_14271_p_din0,
        grp_fu_14271_p_din1,
        grp_fu_14271_p_opcode,
        grp_fu_14271_p_dout0,
        grp_fu_14271_p_ce,
        grp_fu_14277_p_din0,
        grp_fu_14277_p_din1,
        grp_fu_14277_p_dout0,
        grp_fu_14277_p_ce,
        grp_fu_28629_p_din0,
        grp_fu_28629_p_din1,
        grp_fu_28629_p_dout0,
        grp_fu_28629_p_ce,
        grp_pow_generic_double_s_fu_28633_p_din1,
        grp_pow_generic_double_s_fu_28633_p_din2,
        grp_pow_generic_double_s_fu_28633_p_dout0,
        grp_pow_generic_double_s_fu_28633_p_ce,
        grp_pow_generic_double_s_fu_28633_p_start,
        grp_pow_generic_double_s_fu_28633_p_ready,
        grp_pow_generic_double_s_fu_28633_p_done,
        grp_pow_generic_double_s_fu_28633_p_idle
);

parameter    ap_ST_fsm_pp0_stage0 = 34'd1;
parameter    ap_ST_fsm_pp0_stage1 = 34'd2;
parameter    ap_ST_fsm_pp0_stage2 = 34'd4;
parameter    ap_ST_fsm_pp0_stage3 = 34'd8;
parameter    ap_ST_fsm_pp0_stage4 = 34'd16;
parameter    ap_ST_fsm_pp0_stage5 = 34'd32;
parameter    ap_ST_fsm_pp0_stage6 = 34'd64;
parameter    ap_ST_fsm_pp0_stage7 = 34'd128;
parameter    ap_ST_fsm_pp0_stage8 = 34'd256;
parameter    ap_ST_fsm_pp0_stage9 = 34'd512;
parameter    ap_ST_fsm_pp0_stage10 = 34'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 34'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 34'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 34'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 34'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 34'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 34'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 34'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 34'd262144;
parameter    ap_ST_fsm_pp0_stage19 = 34'd524288;
parameter    ap_ST_fsm_pp0_stage20 = 34'd1048576;
parameter    ap_ST_fsm_pp0_stage21 = 34'd2097152;
parameter    ap_ST_fsm_pp0_stage22 = 34'd4194304;
parameter    ap_ST_fsm_pp0_stage23 = 34'd8388608;
parameter    ap_ST_fsm_pp0_stage24 = 34'd16777216;
parameter    ap_ST_fsm_pp0_stage25 = 34'd33554432;
parameter    ap_ST_fsm_pp0_stage26 = 34'd67108864;
parameter    ap_ST_fsm_pp0_stage27 = 34'd134217728;
parameter    ap_ST_fsm_pp0_stage28 = 34'd268435456;
parameter    ap_ST_fsm_pp0_stage29 = 34'd536870912;
parameter    ap_ST_fsm_pp0_stage30 = 34'd1073741824;
parameter    ap_ST_fsm_pp0_stage31 = 34'd2147483648;
parameter    ap_ST_fsm_pp0_stage32 = 34'd4294967296;
parameter    ap_ST_fsm_pp0_stage33 = 34'd8589934592;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] sigma_init;
input  [63:0] S0;
output   m_axi_gmem_39_0_AWVALID;
input   m_axi_gmem_39_0_AWREADY;
output  [63:0] m_axi_gmem_39_0_AWADDR;
output  [0:0] m_axi_gmem_39_0_AWID;
output  [31:0] m_axi_gmem_39_0_AWLEN;
output  [2:0] m_axi_gmem_39_0_AWSIZE;
output  [1:0] m_axi_gmem_39_0_AWBURST;
output  [1:0] m_axi_gmem_39_0_AWLOCK;
output  [3:0] m_axi_gmem_39_0_AWCACHE;
output  [2:0] m_axi_gmem_39_0_AWPROT;
output  [3:0] m_axi_gmem_39_0_AWQOS;
output  [3:0] m_axi_gmem_39_0_AWREGION;
output  [0:0] m_axi_gmem_39_0_AWUSER;
output   m_axi_gmem_39_0_WVALID;
input   m_axi_gmem_39_0_WREADY;
output  [127:0] m_axi_gmem_39_0_WDATA;
output  [15:0] m_axi_gmem_39_0_WSTRB;
output   m_axi_gmem_39_0_WLAST;
output  [0:0] m_axi_gmem_39_0_WID;
output  [0:0] m_axi_gmem_39_0_WUSER;
output   m_axi_gmem_39_0_ARVALID;
input   m_axi_gmem_39_0_ARREADY;
output  [63:0] m_axi_gmem_39_0_ARADDR;
output  [0:0] m_axi_gmem_39_0_ARID;
output  [31:0] m_axi_gmem_39_0_ARLEN;
output  [2:0] m_axi_gmem_39_0_ARSIZE;
output  [1:0] m_axi_gmem_39_0_ARBURST;
output  [1:0] m_axi_gmem_39_0_ARLOCK;
output  [3:0] m_axi_gmem_39_0_ARCACHE;
output  [2:0] m_axi_gmem_39_0_ARPROT;
output  [3:0] m_axi_gmem_39_0_ARQOS;
output  [3:0] m_axi_gmem_39_0_ARREGION;
output  [0:0] m_axi_gmem_39_0_ARUSER;
input   m_axi_gmem_39_0_RVALID;
output   m_axi_gmem_39_0_RREADY;
input  [127:0] m_axi_gmem_39_0_RDATA;
input   m_axi_gmem_39_0_RLAST;
input  [0:0] m_axi_gmem_39_0_RID;
input  [8:0] m_axi_gmem_39_0_RFIFONUM;
input  [0:0] m_axi_gmem_39_0_RUSER;
input  [1:0] m_axi_gmem_39_0_RRESP;
input   m_axi_gmem_39_0_BVALID;
output   m_axi_gmem_39_0_BREADY;
input  [1:0] m_axi_gmem_39_0_BRESP;
input  [0:0] m_axi_gmem_39_0_BID;
input  [0:0] m_axi_gmem_39_0_BUSER;
input  [59:0] sext_ln31_39;
input  [63:0] sqrt_deltat;
input  [63:0] rho;
input  [63:0] sqrt_one_minus_rho_sq;
input  [63:0] beta;
input  [63:0] one_plus_r_deltat;
input  [63:0] alpha;
input  [63:0] neg_half_alpha_sq_dt;
output  [63:0] p_out;
output   p_out_ap_vld;
output  [63:0] x_assign_39_out;
output   x_assign_39_out_ap_vld;
output  [63:0] grp_fu_14271_p_din0;
output  [63:0] grp_fu_14271_p_din1;
output  [0:0] grp_fu_14271_p_opcode;
input  [63:0] grp_fu_14271_p_dout0;
output   grp_fu_14271_p_ce;
output  [63:0] grp_fu_14277_p_din0;
output  [63:0] grp_fu_14277_p_din1;
input  [63:0] grp_fu_14277_p_dout0;
output   grp_fu_14277_p_ce;
output  [63:0] grp_fu_28629_p_din0;
output  [63:0] grp_fu_28629_p_din1;
input  [63:0] grp_fu_28629_p_dout0;
output   grp_fu_28629_p_ce;
output  [63:0] grp_pow_generic_double_s_fu_28633_p_din1;
output  [63:0] grp_pow_generic_double_s_fu_28633_p_din2;
input  [63:0] grp_pow_generic_double_s_fu_28633_p_dout0;
output   grp_pow_generic_double_s_fu_28633_p_ce;
output   grp_pow_generic_double_s_fu_28633_p_start;
input   grp_pow_generic_double_s_fu_28633_p_ready;
input   grp_pow_generic_double_s_fu_28633_p_done;
input   grp_pow_generic_double_s_fu_28633_p_idle;

reg ap_idle;
reg m_axi_gmem_39_0_RREADY;
reg p_out_ap_vld;
reg x_assign_39_out_ap_vld;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln31_reg_419;
reg    ap_condition_exit_pp0_iter0_stage10;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage33;
wire    ap_block_pp0_stage33_subdone;
reg    gmem_39_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_grp1;
reg   [63:0] reg_238;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage30;
wire    ap_block_pp0_stage30_11001;
reg   [63:0] reg_245;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7_11001;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12_11001;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_block_pp0_stage22_11001;
reg   [63:0] reg_251;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11_11001;
wire    ap_CS_fsm_pp0_stage25;
wire    ap_block_pp0_stage25_11001;
reg   [63:0] reg_257;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_pp0_stage17_11001;
wire    ap_CS_fsm_pp0_stage27;
wire    ap_block_pp0_stage27_11001;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln31_fu_285_p2;
reg   [63:0] x_assign_39_load_reg_423;
wire    ap_block_pp0_stage1_11001_grp0;
reg    ap_block_pp0_stage1_subdone_grp0_done_reg;
wire    ap_block_pp0_stage1_subdone_grp0;
reg    ap_block_pp0_stage1_subdone;
wire   [63:0] trunc_ln40_fu_312_p1;
reg   [63:0] trunc_ln40_reg_429;
reg    ap_block_state2_pp0_stage1_iter0_grp1;
reg    ap_block_pp0_stage1_11001_grp1;
reg   [63:0] trunc_ln40_s_reg_434;
wire   [63:0] bitcast_ln40_fu_326_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
wire   [63:0] bitcast_ln40_62_fu_330_p1;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_11001;
reg   [63:0] mul39_s_reg_449;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8_11001;
reg   [63:0] stock_beta_reg_454;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_block_pp0_stage20_11001_ignoreCallOp131;
reg   [63:0] p_load_reg_459;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_block_pp0_stage21_11001;
reg   [63:0] tmp_s_reg_464;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5_11001;
wire    grp_pow_generic_double_s_fu_195_ap_ready;
reg    grp_pow_generic_double_s_fu_195_ap_ce;
wire    ap_block_pp0_stage1_11001_ignoreCallOp78_grp0;
wire    ap_block_pp0_stage2_11001_ignoreCallOp81;
wire    ap_block_pp0_stage3_11001_ignoreCallOp85;
wire    ap_block_pp0_stage4_11001_ignoreCallOp88;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage5_11001_ignoreCallOp92;
wire    ap_block_pp0_stage6_11001_ignoreCallOp96;
wire    ap_block_pp0_stage7_11001_ignoreCallOp100;
wire    ap_block_pp0_stage8_11001_ignoreCallOp104;
wire    ap_block_pp0_stage9_11001_ignoreCallOp108;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage10_11001_ignoreCallOp111;
wire    ap_block_pp0_stage11_11001_ignoreCallOp114;
wire    ap_block_pp0_stage12_11001_ignoreCallOp116;
wire    ap_block_pp0_stage13_11001_ignoreCallOp118;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage14_11001_ignoreCallOp120;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage15_11001_ignoreCallOp122;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_pp0_stage16_11001_ignoreCallOp124;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_pp0_stage17_11001_ignoreCallOp126;
wire    ap_block_pp0_stage18_11001_ignoreCallOp127;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_pp0_stage19_11001_ignoreCallOp129;
wire    ap_CS_fsm_pp0_stage19;
reg    grp_pow_generic_double_s_fu_195_ap_start_reg;
wire    ap_block_pp0_stage1_ignoreCallOp78_grp0;
reg   [63:0] x_assign_39_fu_104;
reg   [63:0] ap_sig_allocacmp_x_assign_39_load;
wire    ap_block_pp0_stage1_grp0;
wire    ap_loop_init;
wire    ap_block_pp0_stage10;
reg   [63:0] empty_fu_108;
wire    ap_block_pp0_stage10_11001;
wire    ap_block_pp0_stage21;
reg   [5:0] j_39_fu_112;
wire   [5:0] add_ln31_fu_291_p2;
reg   [5:0] ap_sig_allocacmp_j;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage10_01001;
reg   [63:0] grp_fu_225_p0;
reg   [63:0] grp_fu_225_p1;
wire    ap_block_pp0_stage13;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_block_pp0_stage23;
wire    ap_CS_fsm_pp0_stage31;
wire    ap_block_pp0_stage31;
reg   [63:0] grp_fu_229_p0;
reg   [63:0] grp_fu_229_p1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage18;
wire    ap_CS_fsm_pp0_stage26;
wire    ap_block_pp0_stage26;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage28;
wire    ap_block_pp0_stage28;
wire    ap_block_pp0_stage13_00001;
wire    ap_block_pp0_stage23_00001;
wire    ap_block_pp0_stage31_00001;
reg    grp_fu_225_ce;
reg    ap_block_pp0_stage1_11001;
wire    ap_block_pp0_stage13_11001;
wire    ap_block_pp0_stage14_11001;
wire    ap_block_pp0_stage15_11001;
wire    ap_block_pp0_stage16_11001;
wire    ap_block_pp0_stage23_11001;
wire    ap_block_pp0_stage24_11001;
wire    ap_CS_fsm_pp0_stage24;
wire    ap_block_pp0_stage26_11001;
wire    ap_block_pp0_stage31_11001;
wire    ap_block_pp0_stage32_11001;
wire    ap_CS_fsm_pp0_stage32;
wire    ap_block_pp0_stage33_11001;
reg    grp_fu_229_ce;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage9_11001;
wire    ap_block_pp0_stage18_11001;
wire    ap_block_pp0_stage19_11001;
wire    ap_block_pp0_stage20_11001;
wire    ap_block_pp0_stage28_11001;
wire    ap_block_pp0_stage29_11001;
wire    ap_CS_fsm_pp0_stage29;
reg    grp_fu_233_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [33:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_pp0_stage23_subdone;
wire    ap_block_pp0_stage24_subdone;
wire    ap_block_pp0_stage25_subdone;
wire    ap_block_pp0_stage26_subdone;
wire    ap_block_pp0_stage27_subdone;
wire    ap_block_pp0_stage28_subdone;
wire    ap_block_pp0_stage29_subdone;
wire    ap_block_pp0_stage30_subdone;
wire    ap_block_pp0_stage31_subdone;
wire    ap_block_pp0_stage32_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp0_done_reg = 1'b0;
#0 grp_pow_generic_double_s_fu_195_ap_start_reg = 1'b0;
#0 x_assign_39_fu_104 = 64'd0;
#0 empty_fu_108 = 64'd0;
#0 j_39_fu_112 = 6'd0;
#0 ap_done_reg = 1'b0;
end

SABR_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage10),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp0)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage10_subdone) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage10)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage10_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage33_subdone) & (1'b1 == ap_CS_fsm_pp0_stage33))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_double_s_fu_195_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln31_fu_285_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_pow_generic_double_s_fu_195_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_double_s_fu_195_ap_ready == 1'b1)) begin
            grp_pow_generic_double_s_fu_195_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_fu_108 <= sigma_init;
    end else if (((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        empty_fu_108 <= grp_fu_14277_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln31_fu_285_p2 == 1'd0))) begin
            j_39_fu_112 <= add_ln31_fu_291_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_39_fu_112 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_assign_39_fu_104 <= S0;
    end else if (((1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        x_assign_39_fu_104 <= grp_fu_14271_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln31_reg_419 <= icmp_ln31_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        mul39_s_reg_449 <= grp_fu_14277_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage21_11001) & (1'b1 == ap_CS_fsm_pp0_stage21))) begin
        p_load_reg_459 <= empty_fu_108;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage30_11001) & (1'b1 == ap_CS_fsm_pp0_stage30)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        reg_238 <= grp_fu_14277_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage22_11001) & (1'b1 == ap_CS_fsm_pp0_stage22)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        reg_245 <= grp_fu_14277_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage25_11001) & (1'b1 == ap_CS_fsm_pp0_stage25)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)))) begin
        reg_251 <= grp_fu_14277_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage27_11001) & (1'b1 == ap_CS_fsm_pp0_stage27)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage17_11001) & (1'b1 == ap_CS_fsm_pp0_stage17)))) begin
        reg_257 <= grp_fu_14271_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage20_11001_ignoreCallOp131) & (1'b1 == ap_CS_fsm_pp0_stage20))) begin
        stock_beta_reg_454 <= grp_pow_generic_double_s_fu_28633_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        tmp_s_reg_464 <= grp_fu_28629_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        trunc_ln40_reg_429 <= trunc_ln40_fu_312_p1;
        trunc_ln40_s_reg_434 <= {{m_axi_gmem_39_0_RDATA[127:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        x_assign_39_load_reg_423 <= ap_sig_allocacmp_x_assign_39_load;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_419 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage10_subdone) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_condition_exit_pp0_iter0_stage10 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage10 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage10_subdone) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage33_subdone) & (1'b1 == ap_CS_fsm_pp0_stage33))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j = 6'd0;
    end else begin
        ap_sig_allocacmp_j = j_39_fu_112;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_grp0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_x_assign_39_load = grp_fu_14271_p_dout0;
    end else begin
        ap_sig_allocacmp_x_assign_39_load = x_assign_39_fu_104;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_419 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_grp1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem_39_blk_n_R = m_axi_gmem_39_0_RVALID;
    end else begin
        gmem_39_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage33_11001) & (1'b1 == ap_CS_fsm_pp0_stage33)) | ((1'b0 == ap_block_pp0_stage32_11001) & (1'b1 == ap_CS_fsm_pp0_stage32)) | ((1'b0 == ap_block_pp0_stage31_11001) & (1'b1 == ap_CS_fsm_pp0_stage31)) | ((1'b0 == ap_block_pp0_stage26_11001) & (1'b1 == ap_CS_fsm_pp0_stage26)) | ((1'b0 == ap_block_pp0_stage24_11001) & (1'b1 == ap_CS_fsm_pp0_stage24)) | ((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23)) | ((1'b0 == ap_block_pp0_stage16_11001) & (1'b1 == ap_CS_fsm_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage27_11001) & (1'b1 == ap_CS_fsm_pp0_stage27)) 
    | ((1'b0 == ap_block_pp0_stage17_11001) & (1'b1 == ap_CS_fsm_pp0_stage17)) | ((1'b0 == ap_block_pp0_stage25_11001) & (1'b1 == ap_CS_fsm_pp0_stage25)))) begin
        grp_fu_225_ce = 1'b1;
    end else begin
        grp_fu_225_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0_reg == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage31) & (1'b1 == ap_CS_fsm_pp0_stage31))) begin
            grp_fu_225_p0 = mul39_s_reg_449;
        end else if (((1'b0 == ap_block_pp0_stage23) & (1'b1 == ap_CS_fsm_pp0_stage23))) begin
            grp_fu_225_p0 = neg_half_alpha_sq_dt;
        end else if (((1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
            grp_fu_225_p0 = reg_251;
        end else begin
            grp_fu_225_p0 = 'bx;
        end
    end else begin
        grp_fu_225_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage31) & (1'b1 == ap_CS_fsm_pp0_stage31))) begin
        grp_fu_225_p1 = reg_238;
    end else if ((((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage23) & (1'b1 == ap_CS_fsm_pp0_stage23)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13)))) begin
        grp_fu_225_p1 = reg_245;
    end else begin
        grp_fu_225_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage29_11001) & (1'b1 == ap_CS_fsm_pp0_stage29)) | ((1'b0 == ap_block_pp0_stage28_11001) & (1'b1 == ap_CS_fsm_pp0_stage28)) | ((1'b0 == ap_block_pp0_stage20_11001) & (1'b1 == ap_CS_fsm_pp0_stage20)) | ((1'b0 == ap_block_pp0_stage19_11001) & (1'b1 == ap_CS_fsm_pp0_stage19)) | ((1'b0 == ap_block_pp0_stage18_11001) & (1'b1 == ap_CS_fsm_pp0_stage18)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage26_11001) & (1'b1 == ap_CS_fsm_pp0_stage26)) | ((1'b0 == ap_block_pp0_stage24_11001) & (1'b1 == ap_CS_fsm_pp0_stage24)) | ((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage21_11001) & (1'b1 == ap_CS_fsm_pp0_stage21)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) 
    | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage27_11001) & (1'b1 == ap_CS_fsm_pp0_stage27)) | ((1'b0 == ap_block_pp0_stage25_11001) & (1'b1 == ap_CS_fsm_pp0_stage25)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage22_11001) & (1'b1 == ap_CS_fsm_pp0_stage22)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage30_11001) & (1'b1 == ap_CS_fsm_pp0_stage30)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        grp_fu_229_ce = 1'b1;
    end else begin
        grp_fu_229_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_229_p0 = p_load_reg_459;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage26) & (1'b1 == ap_CS_fsm_pp0_stage26))) begin
        grp_fu_229_p0 = reg_251;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage21) & (1'b1 == ap_CS_fsm_pp0_stage21))) begin
        grp_fu_229_p0 = empty_fu_108;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage18) & (1'b1 == ap_CS_fsm_pp0_stage18))) begin
        grp_fu_229_p0 = reg_257;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        grp_fu_229_p0 = reg_245;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_229_p0 = reg_238;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_229_p0 = x_assign_39_load_reg_423;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_229_p0 = sqrt_one_minus_rho_sq;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_229_p0 = bitcast_ln40_fu_326_p1;
    end else begin
        grp_fu_229_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_229_p1 = tmp_s_reg_464;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage26) & (1'b1 == ap_CS_fsm_pp0_stage26))) begin
        grp_fu_229_p1 = reg_238;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage21) & (1'b1 == ap_CS_fsm_pp0_stage21))) begin
        grp_fu_229_p1 = stock_beta_reg_454;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage18) & (1'b1 == ap_CS_fsm_pp0_stage18))) begin
        grp_fu_229_p1 = alpha;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_229_p1 = rho;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_229_p1 = one_plus_r_deltat;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_229_p1 = bitcast_ln40_62_fu_330_p1;
    end else if ((((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_229_p1 = sqrt_deltat;
    end else begin
        grp_fu_229_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage29_11001) & (1'b1 == ap_CS_fsm_pp0_stage29)) | ((1'b0 == ap_block_pp0_stage28_11001) & (1'b1 == ap_CS_fsm_pp0_stage28)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage33_11001) & (1'b1 == ap_CS_fsm_pp0_stage33)) | ((1'b0 == ap_block_pp0_stage32_11001) & (1'b1 == ap_CS_fsm_pp0_stage32)) | ((1'b0 == ap_block_pp0_stage31_11001) & (1'b1 == ap_CS_fsm_pp0_stage31)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage30_11001) & (1'b1 == ap_CS_fsm_pp0_stage30)))) begin
        grp_fu_233_ce = 1'b1;
    end else begin
        grp_fu_233_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage19_11001_ignoreCallOp129) & (1'b1 == ap_CS_fsm_pp0_stage19)) | ((1'b0 == ap_block_pp0_stage18_11001_ignoreCallOp127) & (1'b1 == ap_CS_fsm_pp0_stage18)) | ((1'b0 == ap_block_pp0_stage17_11001_ignoreCallOp126) & (1'b1 == ap_CS_fsm_pp0_stage17)) | ((1'b0 == ap_block_pp0_stage16_11001_ignoreCallOp124) & (1'b1 == ap_CS_fsm_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage15_11001_ignoreCallOp122) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14_11001_ignoreCallOp120) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13_11001_ignoreCallOp118) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12_11001_ignoreCallOp116) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11_11001_ignoreCallOp114) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001_ignoreCallOp111) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001_ignoreCallOp108) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001_ignoreCallOp104) 
    & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001_ignoreCallOp100) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001_ignoreCallOp96) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001_ignoreCallOp92) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp88) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp85) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001_ignoreCallOp81) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp78_grp0) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage20_11001_ignoreCallOp131) & (1'b1 == ap_CS_fsm_pp0_stage20)))) begin
        grp_pow_generic_double_s_fu_195_ap_ce = 1'b1;
    end else begin
        grp_pow_generic_double_s_fu_195_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_419 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axi_gmem_39_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem_39_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln31_reg_419 == 1'd1) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln31_reg_419 == 1'd1) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        x_assign_39_out_ap_vld = 1'b1;
    end else begin
        x_assign_39_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_idle_pp0_1to1 == 1'b1) & (ap_start_int == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage10)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_pp0_stage25 : begin
            if ((1'b0 == ap_block_pp0_stage25_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end
        end
        ap_ST_fsm_pp0_stage26 : begin
            if ((1'b0 == ap_block_pp0_stage26_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end
        end
        ap_ST_fsm_pp0_stage27 : begin
            if ((1'b0 == ap_block_pp0_stage27_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end
        end
        ap_ST_fsm_pp0_stage28 : begin
            if ((1'b0 == ap_block_pp0_stage28_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end
        end
        ap_ST_fsm_pp0_stage29 : begin
            if ((1'b0 == ap_block_pp0_stage29_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end
        end
        ap_ST_fsm_pp0_stage30 : begin
            if ((1'b0 == ap_block_pp0_stage30_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end
        end
        ap_ST_fsm_pp0_stage31 : begin
            if ((1'b0 == ap_block_pp0_stage31_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end
        end
        ap_ST_fsm_pp0_stage32 : begin
            if ((1'b0 == ap_block_pp0_stage32_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end
        end
        ap_ST_fsm_pp0_stage33 : begin
            if ((1'b0 == ap_block_pp0_stage33_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_fu_291_p2 = (ap_sig_allocacmp_j + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp0_stage24 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage25 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage26 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp0_stage27 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp0_stage28 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp0_stage29 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage30 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp0_stage31 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp0_stage32 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp0_stage33 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001_ignoreCallOp111 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001_ignoreCallOp114 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001_ignoreCallOp116 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001_ignoreCallOp118 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001_ignoreCallOp120 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001_ignoreCallOp122 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001_ignoreCallOp124 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_11001_ignoreCallOp126 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_11001_ignoreCallOp127 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_11001_ignoreCallOp129 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp1));
end

assign ap_block_pp0_stage1_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001_grp1 = ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp1));
end

assign ap_block_pp0_stage1_11001_ignoreCallOp78_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_ignoreCallOp78_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp1));
end

assign ap_block_pp0_stage1_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_11001_ignoreCallOp131 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001_ignoreCallOp81 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp85 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp88 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001_ignoreCallOp92 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001_ignoreCallOp96 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001_ignoreCallOp100 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001_ignoreCallOp104 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001_ignoreCallOp108 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0_grp1 = ((icmp_ln31_reg_419 == 1'd0) & (m_axi_gmem_39_0_RVALID == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage10;

assign ap_ready = ap_ready_sig;

assign bitcast_ln40_62_fu_330_p1 = trunc_ln40_s_reg_434;

assign bitcast_ln40_fu_326_p1 = trunc_ln40_reg_429;

assign grp_fu_14271_p_ce = grp_fu_225_ce;

assign grp_fu_14271_p_din0 = grp_fu_225_p0;

assign grp_fu_14271_p_din1 = grp_fu_225_p1;

assign grp_fu_14271_p_opcode = 2'd0;

assign grp_fu_14277_p_ce = grp_fu_229_ce;

assign grp_fu_14277_p_din0 = grp_fu_229_p0;

assign grp_fu_14277_p_din1 = grp_fu_229_p1;

assign grp_fu_28629_p_ce = grp_fu_233_ce;

assign grp_fu_28629_p_din0 = 64'd0;

assign grp_fu_28629_p_din1 = reg_257;

assign grp_pow_generic_double_s_fu_195_ap_ready = grp_pow_generic_double_s_fu_28633_p_ready;

assign grp_pow_generic_double_s_fu_28633_p_ce = grp_pow_generic_double_s_fu_195_ap_ce;

assign grp_pow_generic_double_s_fu_28633_p_din1 = ap_sig_allocacmp_x_assign_39_load;

assign grp_pow_generic_double_s_fu_28633_p_din2 = beta;

assign grp_pow_generic_double_s_fu_28633_p_start = grp_pow_generic_double_s_fu_195_ap_start_reg;

assign icmp_ln31_fu_285_p2 = ((ap_sig_allocacmp_j == 6'd49) ? 1'b1 : 1'b0);

assign m_axi_gmem_39_0_ARADDR = 64'd0;

assign m_axi_gmem_39_0_ARBURST = 2'd0;

assign m_axi_gmem_39_0_ARCACHE = 4'd0;

assign m_axi_gmem_39_0_ARID = 1'd0;

assign m_axi_gmem_39_0_ARLEN = 32'd0;

assign m_axi_gmem_39_0_ARLOCK = 2'd0;

assign m_axi_gmem_39_0_ARPROT = 3'd0;

assign m_axi_gmem_39_0_ARQOS = 4'd0;

assign m_axi_gmem_39_0_ARREGION = 4'd0;

assign m_axi_gmem_39_0_ARSIZE = 3'd0;

assign m_axi_gmem_39_0_ARUSER = 1'd0;

assign m_axi_gmem_39_0_ARVALID = 1'b0;

assign m_axi_gmem_39_0_AWADDR = 64'd0;

assign m_axi_gmem_39_0_AWBURST = 2'd0;

assign m_axi_gmem_39_0_AWCACHE = 4'd0;

assign m_axi_gmem_39_0_AWID = 1'd0;

assign m_axi_gmem_39_0_AWLEN = 32'd0;

assign m_axi_gmem_39_0_AWLOCK = 2'd0;

assign m_axi_gmem_39_0_AWPROT = 3'd0;

assign m_axi_gmem_39_0_AWQOS = 4'd0;

assign m_axi_gmem_39_0_AWREGION = 4'd0;

assign m_axi_gmem_39_0_AWSIZE = 3'd0;

assign m_axi_gmem_39_0_AWUSER = 1'd0;

assign m_axi_gmem_39_0_AWVALID = 1'b0;

assign m_axi_gmem_39_0_BREADY = 1'b0;

assign m_axi_gmem_39_0_WDATA = 128'd0;

assign m_axi_gmem_39_0_WID = 1'd0;

assign m_axi_gmem_39_0_WLAST = 1'b0;

assign m_axi_gmem_39_0_WSTRB = 16'd0;

assign m_axi_gmem_39_0_WUSER = 1'd0;

assign m_axi_gmem_39_0_WVALID = 1'b0;

assign p_out = empty_fu_108;

assign trunc_ln40_fu_312_p1 = m_axi_gmem_39_0_RDATA[63:0];

assign x_assign_39_out = x_assign_39_fu_104;

endmodule //SABR_SABR_Pipeline_VITIS_LOOP_31_339
