// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module GBM_GBM_Pipeline_VITIS_LOOP_28_361 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        S0,
        m_axi_gmem_61_0_AWVALID,
        m_axi_gmem_61_0_AWREADY,
        m_axi_gmem_61_0_AWADDR,
        m_axi_gmem_61_0_AWID,
        m_axi_gmem_61_0_AWLEN,
        m_axi_gmem_61_0_AWSIZE,
        m_axi_gmem_61_0_AWBURST,
        m_axi_gmem_61_0_AWLOCK,
        m_axi_gmem_61_0_AWCACHE,
        m_axi_gmem_61_0_AWPROT,
        m_axi_gmem_61_0_AWQOS,
        m_axi_gmem_61_0_AWREGION,
        m_axi_gmem_61_0_AWUSER,
        m_axi_gmem_61_0_WVALID,
        m_axi_gmem_61_0_WREADY,
        m_axi_gmem_61_0_WDATA,
        m_axi_gmem_61_0_WSTRB,
        m_axi_gmem_61_0_WLAST,
        m_axi_gmem_61_0_WID,
        m_axi_gmem_61_0_WUSER,
        m_axi_gmem_61_0_ARVALID,
        m_axi_gmem_61_0_ARREADY,
        m_axi_gmem_61_0_ARADDR,
        m_axi_gmem_61_0_ARID,
        m_axi_gmem_61_0_ARLEN,
        m_axi_gmem_61_0_ARSIZE,
        m_axi_gmem_61_0_ARBURST,
        m_axi_gmem_61_0_ARLOCK,
        m_axi_gmem_61_0_ARCACHE,
        m_axi_gmem_61_0_ARPROT,
        m_axi_gmem_61_0_ARQOS,
        m_axi_gmem_61_0_ARREGION,
        m_axi_gmem_61_0_ARUSER,
        m_axi_gmem_61_0_RVALID,
        m_axi_gmem_61_0_RREADY,
        m_axi_gmem_61_0_RDATA,
        m_axi_gmem_61_0_RLAST,
        m_axi_gmem_61_0_RID,
        m_axi_gmem_61_0_RFIFONUM,
        m_axi_gmem_61_0_RUSER,
        m_axi_gmem_61_0_RRESP,
        m_axi_gmem_61_0_BVALID,
        m_axi_gmem_61_0_BREADY,
        m_axi_gmem_61_0_BRESP,
        m_axi_gmem_61_0_BID,
        m_axi_gmem_61_0_BUSER,
        sext_ln28_61,
        sigma,
        sqrt_deltat,
        drift,
        mul204_61_out,
        mul204_61_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] S0;
output   m_axi_gmem_61_0_AWVALID;
input   m_axi_gmem_61_0_AWREADY;
output  [63:0] m_axi_gmem_61_0_AWADDR;
output  [0:0] m_axi_gmem_61_0_AWID;
output  [31:0] m_axi_gmem_61_0_AWLEN;
output  [2:0] m_axi_gmem_61_0_AWSIZE;
output  [1:0] m_axi_gmem_61_0_AWBURST;
output  [1:0] m_axi_gmem_61_0_AWLOCK;
output  [3:0] m_axi_gmem_61_0_AWCACHE;
output  [2:0] m_axi_gmem_61_0_AWPROT;
output  [3:0] m_axi_gmem_61_0_AWQOS;
output  [3:0] m_axi_gmem_61_0_AWREGION;
output  [0:0] m_axi_gmem_61_0_AWUSER;
output   m_axi_gmem_61_0_WVALID;
input   m_axi_gmem_61_0_WREADY;
output  [63:0] m_axi_gmem_61_0_WDATA;
output  [7:0] m_axi_gmem_61_0_WSTRB;
output   m_axi_gmem_61_0_WLAST;
output  [0:0] m_axi_gmem_61_0_WID;
output  [0:0] m_axi_gmem_61_0_WUSER;
output   m_axi_gmem_61_0_ARVALID;
input   m_axi_gmem_61_0_ARREADY;
output  [63:0] m_axi_gmem_61_0_ARADDR;
output  [0:0] m_axi_gmem_61_0_ARID;
output  [31:0] m_axi_gmem_61_0_ARLEN;
output  [2:0] m_axi_gmem_61_0_ARSIZE;
output  [1:0] m_axi_gmem_61_0_ARBURST;
output  [1:0] m_axi_gmem_61_0_ARLOCK;
output  [3:0] m_axi_gmem_61_0_ARCACHE;
output  [2:0] m_axi_gmem_61_0_ARPROT;
output  [3:0] m_axi_gmem_61_0_ARQOS;
output  [3:0] m_axi_gmem_61_0_ARREGION;
output  [0:0] m_axi_gmem_61_0_ARUSER;
input   m_axi_gmem_61_0_RVALID;
output   m_axi_gmem_61_0_RREADY;
input  [63:0] m_axi_gmem_61_0_RDATA;
input   m_axi_gmem_61_0_RLAST;
input  [0:0] m_axi_gmem_61_0_RID;
input  [8:0] m_axi_gmem_61_0_RFIFONUM;
input  [0:0] m_axi_gmem_61_0_RUSER;
input  [1:0] m_axi_gmem_61_0_RRESP;
input   m_axi_gmem_61_0_BVALID;
output   m_axi_gmem_61_0_BREADY;
input  [1:0] m_axi_gmem_61_0_BRESP;
input  [0:0] m_axi_gmem_61_0_BID;
input  [0:0] m_axi_gmem_61_0_BUSER;
input  [60:0] sext_ln28_61;
input  [63:0] sigma;
input  [63:0] sqrt_deltat;
input  [63:0] drift;
output  [63:0] mul204_61_out;
output   mul204_61_out_ap_vld;

reg ap_idle;
reg m_axi_gmem_61_0_RREADY;
reg mul204_61_out_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln28_reg_217;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_61_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_grp1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln28_fu_142_p2;
reg   [0:0] icmp_ln28_reg_217_pp0_iter1_reg;
reg   [0:0] icmp_ln28_reg_217_pp0_iter2_reg;
reg   [0:0] icmp_ln28_reg_217_pp0_iter3_reg;
reg   [0:0] icmp_ln28_reg_217_pp0_iter4_reg;
reg   [0:0] icmp_ln28_reg_217_pp0_iter5_reg;
reg   [0:0] icmp_ln28_reg_217_pp0_iter6_reg;
reg   [0:0] icmp_ln28_reg_217_pp0_iter7_reg;
reg   [63:0] gmem_61_addr_read_reg_221;
reg    ap_block_state2_pp0_stage1_iter0_grp1;
reg    ap_block_pp0_stage1_11001_grp1;
wire   [63:0] random_val_fu_165_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
wire   [63:0] grp_fu_116_p2;
reg   [63:0] mul15_s_reg_231;
reg   [63:0] mul16_s_reg_236;
wire    ap_block_pp0_stage3_11001;
wire   [63:0] grp_fu_112_p2;
reg   [63:0] exponent_reg_241;
wire   [63:0] grp_fu_120_p2;
reg   [63:0] tmp_s_reg_246;
wire    ap_block_pp0_stage1_11001_grp0;
reg    ap_block_pp0_stage1_subdone_grp0_done_reg;
wire    ap_block_pp0_stage1_subdone_grp0;
reg    ap_block_pp0_stage1_subdone;
reg   [63:0] mul204_61_fu_62;
reg   [63:0] ap_sig_allocacmp_mul204_61_load;
wire    ap_block_pp0_stage1_grp0;
wire    ap_loop_init;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter7_stage1;
reg    ap_idle_pp0_0to6;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [5:0] j_fu_66;
wire   [5:0] add_ln28_fu_148_p2;
reg   [5:0] ap_sig_allocacmp_j_39;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1_01001_grp0;
reg   [63:0] grp_fu_116_p0;
reg   [63:0] grp_fu_116_p1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
reg    grp_fu_112_ce;
reg    ap_block_pp0_stage1_11001;
reg    grp_fu_116_ce;
reg    grp_fu_120_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to8;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp0_done_reg = 1'b0;
#0 mul204_61_fu_62 = 64'd0;
#0 j_fu_66 = 6'd0;
#0 ap_done_reg = 1'b0;
end

GBM_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U614(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(drift),
    .din1(mul16_s_reg_236),
    .ce(grp_fu_112_ce),
    .dout(grp_fu_112_p2)
);

GBM_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U615(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_116_p0),
    .din1(grp_fu_116_p1),
    .ce(grp_fu_116_ce),
    .dout(grp_fu_116_p2)
);

GBM_dexp_64ns_64ns_64_12_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dexp_64ns_64ns_64_12_full_dsp_1_U616(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(exponent_reg_241),
    .ce(grp_fu_120_ce),
    .dout(grp_fu_120_p2)
);

GBM_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp0)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to6 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter7_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to6 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter7_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to6 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter7_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to6 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter7_stage1))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to6 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter7_stage1))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to6 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter7_stage1))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to6 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter7_stage1))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln28_fu_142_p2 == 1'd0))) begin
            j_fu_66 <= add_ln28_fu_148_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_66 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul204_61_fu_62 <= S0;
    end else if (((1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul204_61_fu_62 <= grp_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exponent_reg_241 <= grp_fu_112_p2;
        icmp_ln28_reg_217 <= icmp_ln28_fu_142_p2;
        icmp_ln28_reg_217_pp0_iter1_reg <= icmp_ln28_reg_217;
        icmp_ln28_reg_217_pp0_iter2_reg <= icmp_ln28_reg_217_pp0_iter1_reg;
        icmp_ln28_reg_217_pp0_iter3_reg <= icmp_ln28_reg_217_pp0_iter2_reg;
        icmp_ln28_reg_217_pp0_iter4_reg <= icmp_ln28_reg_217_pp0_iter3_reg;
        icmp_ln28_reg_217_pp0_iter5_reg <= icmp_ln28_reg_217_pp0_iter4_reg;
        icmp_ln28_reg_217_pp0_iter6_reg <= icmp_ln28_reg_217_pp0_iter5_reg;
        icmp_ln28_reg_217_pp0_iter7_reg <= icmp_ln28_reg_217_pp0_iter6_reg;
        tmp_s_reg_246 <= grp_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem_61_addr_read_reg_221 <= m_axi_gmem_61_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul15_s_reg_231 <= grp_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul16_s_reg_236 <= grp_fu_116_p2;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_217 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln28_reg_217_pp0_iter7_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter7_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter7_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to6 = 1'b1;
    end else begin
        ap_idle_pp0_0to6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to8 = 1'b1;
    end else begin
        ap_idle_pp0_1to8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_39 = 6'd0;
    end else begin
        ap_sig_allocacmp_j_39 = j_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_grp0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_mul204_61_load = grp_fu_116_p2;
    end else begin
        ap_sig_allocacmp_mul204_61_load = mul204_61_fu_62;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_217 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_grp1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem_61_blk_n_R = m_axi_gmem_61_0_RVALID;
    end else begin
        gmem_61_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_112_ce = 1'b1;
    end else begin
        grp_fu_112_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_116_ce = 1'b1;
    end else begin
        grp_fu_116_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_grp0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_116_p0 = ap_sig_allocacmp_mul204_61_load;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_116_p0 = mul15_s_reg_231;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_116_p0 = random_val_fu_165_p1;
    end else begin
        grp_fu_116_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_grp0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_116_p1 = tmp_s_reg_246;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_116_p1 = sqrt_deltat;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_116_p1 = sigma;
    end else begin
        grp_fu_116_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_120_ce = 1'b1;
    end else begin
        grp_fu_120_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_217 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axi_gmem_61_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem_61_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln28_reg_217_pp0_iter7_reg == 1'd1))) begin
        mul204_61_out_ap_vld = 1'b1;
    end else begin
        mul204_61_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to8 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to6 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter7_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_fu_148_p2 = (ap_sig_allocacmp_j_39 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp1));
end

assign ap_block_pp0_stage1_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001_grp1 = ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp1));
end

assign ap_block_pp0_stage1_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp1));
end

assign ap_block_pp0_stage1_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0_grp1 = ((icmp_ln28_reg_217 == 1'd0) & (m_axi_gmem_61_0_RVALID == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign ap_ready = ap_ready_sig;

assign icmp_ln28_fu_142_p2 = ((ap_sig_allocacmp_j_39 == 6'd49) ? 1'b1 : 1'b0);

assign m_axi_gmem_61_0_ARADDR = 64'd0;

assign m_axi_gmem_61_0_ARBURST = 2'd0;

assign m_axi_gmem_61_0_ARCACHE = 4'd0;

assign m_axi_gmem_61_0_ARID = 1'd0;

assign m_axi_gmem_61_0_ARLEN = 32'd0;

assign m_axi_gmem_61_0_ARLOCK = 2'd0;

assign m_axi_gmem_61_0_ARPROT = 3'd0;

assign m_axi_gmem_61_0_ARQOS = 4'd0;

assign m_axi_gmem_61_0_ARREGION = 4'd0;

assign m_axi_gmem_61_0_ARSIZE = 3'd0;

assign m_axi_gmem_61_0_ARUSER = 1'd0;

assign m_axi_gmem_61_0_ARVALID = 1'b0;

assign m_axi_gmem_61_0_AWADDR = 64'd0;

assign m_axi_gmem_61_0_AWBURST = 2'd0;

assign m_axi_gmem_61_0_AWCACHE = 4'd0;

assign m_axi_gmem_61_0_AWID = 1'd0;

assign m_axi_gmem_61_0_AWLEN = 32'd0;

assign m_axi_gmem_61_0_AWLOCK = 2'd0;

assign m_axi_gmem_61_0_AWPROT = 3'd0;

assign m_axi_gmem_61_0_AWQOS = 4'd0;

assign m_axi_gmem_61_0_AWREGION = 4'd0;

assign m_axi_gmem_61_0_AWSIZE = 3'd0;

assign m_axi_gmem_61_0_AWUSER = 1'd0;

assign m_axi_gmem_61_0_AWVALID = 1'b0;

assign m_axi_gmem_61_0_BREADY = 1'b0;

assign m_axi_gmem_61_0_WDATA = 64'd0;

assign m_axi_gmem_61_0_WID = 1'd0;

assign m_axi_gmem_61_0_WLAST = 1'b0;

assign m_axi_gmem_61_0_WSTRB = 8'd0;

assign m_axi_gmem_61_0_WUSER = 1'd0;

assign m_axi_gmem_61_0_WVALID = 1'b0;

assign mul204_61_out = mul204_61_fu_62;

assign random_val_fu_165_p1 = gmem_61_addr_read_reg_221;

endmodule //GBM_GBM_Pipeline_VITIS_LOOP_28_361
