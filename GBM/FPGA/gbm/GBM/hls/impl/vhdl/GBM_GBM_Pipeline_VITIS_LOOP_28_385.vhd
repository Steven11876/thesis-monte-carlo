-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GBM_GBM_Pipeline_VITIS_LOOP_28_385 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    S0 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_85_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_85_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem_85_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_85_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_85_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_85_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_85_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_85_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_85_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_85_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_85_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_85_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_85_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_85_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem_85_0_WREADY : IN STD_LOGIC;
    m_axi_gmem_85_0_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_85_0_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_85_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem_85_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_85_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_85_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_85_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem_85_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_85_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_85_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_85_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_85_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_85_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_85_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_85_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_85_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_85_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_85_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_85_0_RVALID : IN STD_LOGIC;
    m_axi_gmem_85_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem_85_0_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_85_0_RLAST : IN STD_LOGIC;
    m_axi_gmem_85_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_85_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_85_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_85_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_85_0_BVALID : IN STD_LOGIC;
    m_axi_gmem_85_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem_85_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_85_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_85_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln28_85 : IN STD_LOGIC_VECTOR (60 downto 0);
    sigma : IN STD_LOGIC_VECTOR (63 downto 0);
    sqrt_deltat : IN STD_LOGIC_VECTOR (63 downto 0);
    drift : IN STD_LOGIC_VECTOR (63 downto 0);
    mul204_85_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    mul204_85_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of GBM_GBM_Pipeline_VITIS_LOOP_28_385 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln28_reg_217 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_85_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln28_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_217_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_217_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_217_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_217_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_217_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_217_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_217_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_85_addr_read_reg_221 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_pp0_stage1_iter0_grp1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_grp1 : BOOLEAN;
    signal random_val_fu_165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_116_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul15_s_reg_231 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul16_s_reg_236 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_112_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal exponent_reg_241 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_120_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_246 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage1_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal mul204_85_fu_62 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_sig_allocacmp_mul204_85_load : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_grp0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter7_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to6 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal j_fu_66 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln28_fu_148_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_j_15 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1_01001_grp0 : BOOLEAN;
    signal grp_fu_116_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_116_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal grp_fu_112_ce : STD_LOGIC;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal grp_fu_116_ce : STD_LOGIC;
    signal grp_fu_120_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to8 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component GBM_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component GBM_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component GBM_dexp_64ns_64ns_64_12_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component GBM_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    dadd_64ns_64ns_64_5_full_dsp_1_U854 : component GBM_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => drift,
        din1 => mul16_s_reg_236,
        ce => grp_fu_112_ce,
        dout => grp_fu_112_p2);

    dmul_64ns_64ns_64_5_max_dsp_1_U855 : component GBM_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_116_p0,
        din1 => grp_fu_116_p1,
        ce => grp_fu_116_ce,
        dout => grp_fu_116_p2);

    dexp_64ns_64ns_64_12_full_dsp_1_U856 : component GBM_dexp_64ns_64ns_64_12_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => exponent_reg_241,
        ce => grp_fu_120_ce,
        dout => grp_fu_120_p2);

    flow_control_loop_pipe_sequential_init_U : component GBM_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage1_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then 
                        ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0)) then 
                        ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to6 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to6 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to6 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to6 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to6 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to6 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to6 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    j_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln28_fu_142_p2 = ap_const_lv1_0))) then 
                    j_fu_66 <= add_ln28_fu_148_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_66 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    mul204_85_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mul204_85_fu_62 <= S0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                mul204_85_fu_62 <= grp_fu_116_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exponent_reg_241 <= grp_fu_112_p2;
                icmp_ln28_reg_217 <= icmp_ln28_fu_142_p2;
                icmp_ln28_reg_217_pp0_iter1_reg <= icmp_ln28_reg_217;
                icmp_ln28_reg_217_pp0_iter2_reg <= icmp_ln28_reg_217_pp0_iter1_reg;
                icmp_ln28_reg_217_pp0_iter3_reg <= icmp_ln28_reg_217_pp0_iter2_reg;
                icmp_ln28_reg_217_pp0_iter4_reg <= icmp_ln28_reg_217_pp0_iter3_reg;
                icmp_ln28_reg_217_pp0_iter5_reg <= icmp_ln28_reg_217_pp0_iter4_reg;
                icmp_ln28_reg_217_pp0_iter6_reg <= icmp_ln28_reg_217_pp0_iter5_reg;
                icmp_ln28_reg_217_pp0_iter7_reg <= icmp_ln28_reg_217_pp0_iter6_reg;
                tmp_s_reg_246 <= grp_fu_120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                gmem_85_addr_read_reg_221 <= m_axi_gmem_85_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul15_s_reg_231 <= grp_fu_116_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul16_s_reg_236 <= grp_fu_116_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter7_stage1, ap_idle_pp0_0to6, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to8, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to8 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to6 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln28_fu_148_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_15) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state2_pp0_stage1_iter0_grp1)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp1));
    end process;

        ap_block_pp0_stage1_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state2_pp0_stage1_iter0_grp1)
    begin
                ap_block_pp0_stage1_11001_grp1 <= ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp1));
    end process;

        ap_block_pp0_stage1_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state2_pp0_stage1_iter0_grp1)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp1));
    end process;

        ap_block_pp0_stage1_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage1_iter0_grp1_assign_proc : process(icmp_ln28_reg_217, m_axi_gmem_85_0_RVALID)
    begin
                ap_block_state2_pp0_stage1_iter0_grp1 <= ((icmp_ln28_reg_217 = ap_const_lv1_0) and (m_axi_gmem_85_0_RVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln28_reg_217)
    begin
        if (((icmp_ln28_reg_217 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter7_stage1_assign_proc : process(ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage1, icmp_ln28_reg_217_pp0_iter7_reg, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln28_reg_217_pp0_iter7_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter7_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter7_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready_pp0_iter7_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to8_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to8 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to8 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_15_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, j_fu_66, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_15 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_j_15 <= j_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_mul204_85_load_assign_proc : process(ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, grp_fu_116_p2, mul204_85_fu_62, ap_block_pp0_stage1_grp0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_grp0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_sig_allocacmp_mul204_85_load <= grp_fu_116_p2;
        else 
            ap_sig_allocacmp_mul204_85_load <= mul204_85_fu_62;
        end if; 
    end process;


    gmem_85_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter0_reg, icmp_ln28_reg_217, m_axi_gmem_85_0_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_grp1)
    begin
        if (((icmp_ln28_reg_217 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gmem_85_blk_n_R <= m_axi_gmem_85_0_RVALID;
        else 
            gmem_85_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_112_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage1_11001_grp0, ap_block_pp0_stage1_subdone_grp0_done_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_112_ce <= ap_const_logic_1;
        else 
            grp_fu_112_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_116_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage1_11001_grp0, ap_block_pp0_stage1_subdone_grp0_done_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_116_ce <= ap_const_logic_1;
        else 
            grp_fu_116_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_116_p0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, random_val_fu_165_p1, ap_CS_fsm_pp0_stage2, mul15_s_reg_231, ap_sig_allocacmp_mul204_85_load, ap_block_pp0_stage1_grp0, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_grp0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_116_p0 <= ap_sig_allocacmp_mul204_85_load;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_116_p0 <= mul15_s_reg_231;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_116_p0 <= random_val_fu_165_p1;
        else 
            grp_fu_116_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_116_p1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0_reg, sigma, sqrt_deltat, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, tmp_s_reg_246, ap_block_pp0_stage1_grp0, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_grp0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_116_p1 <= tmp_s_reg_246;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_116_p1 <= sqrt_deltat;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_116_p1 <= sigma;
        else 
            grp_fu_116_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_120_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage1_11001_grp0, ap_block_pp0_stage1_subdone_grp0_done_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_120_ce <= ap_const_logic_1;
        else 
            grp_fu_120_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln28_fu_142_p2 <= "1" when (ap_sig_allocacmp_j_15 = ap_const_lv6_31) else "0";
    m_axi_gmem_85_0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_85_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_85_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_85_0_ARID <= ap_const_lv1_0;
    m_axi_gmem_85_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_85_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_85_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_85_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_85_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_85_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_85_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_85_0_ARVALID <= ap_const_logic_0;
    m_axi_gmem_85_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_85_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_85_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_85_0_AWID <= ap_const_lv1_0;
    m_axi_gmem_85_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_85_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_85_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_85_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_85_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_85_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_85_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_85_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem_85_0_BREADY <= ap_const_logic_0;

    m_axi_gmem_85_0_RREADY_assign_proc : process(ap_enable_reg_pp0_iter0_reg, icmp_ln28_reg_217, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001_grp1)
    begin
        if (((icmp_ln28_reg_217 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_axi_gmem_85_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_85_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_85_0_WDATA <= ap_const_lv64_0;
    m_axi_gmem_85_0_WID <= ap_const_lv1_0;
    m_axi_gmem_85_0_WLAST <= ap_const_logic_0;
    m_axi_gmem_85_0_WSTRB <= ap_const_lv8_0;
    m_axi_gmem_85_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem_85_0_WVALID <= ap_const_logic_0;
    mul204_85_out <= mul204_85_fu_62;

    mul204_85_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln28_reg_217_pp0_iter7_reg, ap_block_pp0_stage1_11001_grp0, ap_block_pp0_stage1_subdone_grp0_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln28_reg_217_pp0_iter7_reg = ap_const_lv1_1))) then 
            mul204_85_out_ap_vld <= ap_const_logic_1;
        else 
            mul204_85_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    random_val_fu_165_p1 <= gmem_85_addr_read_reg_221;
end behav;
